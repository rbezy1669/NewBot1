"""
Telegram Bot for Russian Energy Platform
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç–∞ —Å Mini App –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import os
import logging
import asyncio
import aiohttp
from typing import Optional, Dict, Any

# Telegram imports
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, WebAppInfo
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    print(f"Telegram library import error: {e}")
    TELEGRAM_AVAILABLE = False

# Configuration
BOT_TOKEN = os.getenv('7807810519:AAGlq6BQhrOiLJe1Obl0H0-nKoHk0KLfsmw')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:5000')
MINI_APP_URL = f"{API_BASE_URL}/static/index.html"

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class EnergyBot:
    """Telegram Bot –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.error("Telegram library –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return
            
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.session = None
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("miniapp", self.miniapp_command))
        self.application.add_handler(CommandHandler("readings", self.readings_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CommandHandler("services", self.services_command))
        self.application.add_handler(CommandHandler("support", self.support_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        welcome_message = f"""
üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìä –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
‚Ä¢ üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
‚Ä¢ üõ† –ó–∞–∫–∞–∑—ã–≤–∞—Ç—å —É—Å–ª—É–≥–∏
‚Ä¢ üí¨ –ü–æ–ª—É—á–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:
        """
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üìä Mini App", web_app=WebAppInfo(url=MINI_APP_URL))],
            [KeyboardButton("üìã –ü–æ–∫–∞–∑–∞–Ω–∏—è"), KeyboardButton("üìà –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üõ† –£—Å–ª—É–≥–∏"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def miniapp_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /miniapp - –∑–∞–ø—É—Å–∫ Mini App"""
        keyboard = [[
            InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=WebAppInfo(url=MINI_APP_URL))
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üåü –û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ Mini App –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏:",
            reply_markup=reply_markup
        )
    
    async def readings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        keyboard = [
            [InlineKeyboardButton("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", callback_data="meter_electric")],
            [InlineKeyboardButton("üî• –ì–∞–∑", callback_data="meter_gas")],
            [InlineKeyboardButton("üíß –í–æ–¥–∞", callback_data="meter_water")],
            [InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url=MINI_APP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:",
            reply_markup=reply_markup
        )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        
        try:
            history = await self.get_readings_history(user_id)
            
            if not history:
                message = "üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—É—Å—Ç–∞.\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ Mini App!"
            else:
                message = "üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è:\n\n"
                for reading in history[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    date = reading.get('reading_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç–∞
                    value = reading.get('reading_value', 0)
                    meter_type = reading.get('meter_type', 'electric')
                    icon = self._get_meter_icon(meter_type)
                    
                    message += f"{icon} {date}: {value} –∫–í—Ç¬∑—á\n"
                
                message += "\nüöÄ –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏"
            
            keyboard = [[
                InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url=MINI_APP_URL))
            ]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def services_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —É—Å–ª—É–≥"""
        keyboard = [
            [InlineKeyboardButton("üîß –ó–∞–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–∞", callback_data="service_replacement")],
            [InlineKeyboardButton("‚öôÔ∏è –¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", callback_data="service_maintenance")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="service_consultation")],
            [InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url=MINI_APP_URL))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üõ† –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=reply_markup
        )
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        support_message = """
üí¨ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 555-0123
üìß Email: support@energy.ru
üïê –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 
   –ü–Ω-–ü—Ç: 8:00-20:00
   –°–±-–í—Å: 9:00-18:00

üîß –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (800) 555-0911
(–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)

üåê –°–∞–π—Ç: energy.gov.ru
        """
        
        keyboard = [[
            InlineKeyboardButton("üöÄ Mini App", web_app=WebAppInfo(url=MINI_APP_URL))
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(support_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_message = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/miniapp - –û—Ç–∫—Ä—ã—Ç—å Mini App
/readings - –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è
/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π  
/services - –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏
/support - –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ Mini App –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
‚Ä¢ –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å—á–µ—Ç—á–∏–∫–æ–≤
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
‚Ä¢ –ó–∞–∫–∞–∑ —É—Å–ª—É–≥ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
        """
        
        await update.message.reply_text(help_message)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("meter_"):
            await self._handle_meter_selection(query, context)
        elif data.startswith("service_"):
            await self._handle_service_selection(query, context)
    
    async def _handle_meter_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        meter_type = query.data.replace("meter_", "")
        meter_names = {
            "electric": "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
            "gas": "–≥–∞–∑–∞", 
            "water": "–≤–æ–¥—ã"
        }
        
        context.user_data['waiting_for'] = f'reading_{meter_type}'
        
        message = f"üìä –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ {meter_names.get(meter_type, '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞')}:"
        
        keyboard = [[
            InlineKeyboardButton("üöÄ –ß–µ—Ä–µ–∑ Mini App", web_app=WebAppInfo(url=MINI_APP_URL)),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def _handle_service_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
        service_type = query.data.replace("service_", "")
        service_names = {
            "replacement": "–∑–∞–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–∞",
            "maintenance": "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "consultation": "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
        }
        
        service_name = service_names.get(service_type, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
        
        message = f"üõ† –£—Å–ª—É–≥–∞: {service_name}\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Mini App —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º."
        
        keyboard = [[
            InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –≤ Mini App", web_app=WebAppInfo(url=MINI_APP_URL))
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=reply_markup)
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_data = context.user_data
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        if user_data.get('waiting_for', '').startswith('reading_'):
            await self._process_reading_input(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        if text == "üìã –ü–æ–∫–∞–∑–∞–Ω–∏—è":
            await self.readings_command(update, context)
        elif text == "üìà –ò—Å—Ç–æ—Ä–∏—è":
            await self.history_command(update, context)
        elif text == "üõ† –£—Å–ª—É–≥–∏":
            await self.services_command(update, context)
        elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await self.support_command(update, context)
        else:
            await update.message.reply_text(
                "ü§î –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def _process_reading_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        try:
            reading_value = int(update.message.text)
            
            if reading_value < 0:
                await update.message.reply_text("‚ùå –ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏.")
                return
            
            waiting_for = context.user_data.get('waiting_for', '')
            meter_type = waiting_for.replace('reading_', '')
            user_id = str(update.effective_user.id)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
            success = await self.submit_reading(user_id, reading_value, meter_type)
            
            if success:
                icon = self._get_meter_icon(meter_type)
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã!\n{icon} {reading_value} –∫–í—Ç¬∑—á"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ Mini App.")
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('waiting_for', None)
            
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
    
    # API –º–µ—Ç–æ–¥—ã
    async def submit_reading(self, user_id: str, reading_value: int, meter_type: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            data = {
                "telegram_id": int(user_id),
                "reading_value": reading_value,
                "meter_type": meter_type
            }
            
            async with self.session.post(f"{API_BASE_URL}/api/readings", json=data) as response:
                return response.status == 200
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π: {e}")
            return False
    
    async def get_readings_history(self, user_id: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        try:
            if not self.session:
                self.session = aiohttp.ClientSession()
            
            async with self.session.get(f"{API_BASE_URL}/api/readings/{user_id}") as response:
                if response.status == 200:
                    return await response.json()
                return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def _get_meter_icon(self, meter_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        icons = {
            'electric': '‚ö°',
            'gas': 'üî•',
            'water': 'üíß'
        }
        return icons.get(meter_type, 'üìä')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.error("Telegram library –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        if not BOT_TOKEN:
            logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
        
        try:
            logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.application.run_polling(drop_pending_updates=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        finally:
            if self.session:
                asyncio.run(self.session.close())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = EnergyBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()