import os
import sqlite3
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters.command import CommandObject

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(
    parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


@router.message(F.text.in_(["/start", "/admin"]))
async def start_admin(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.reply("ü§ñ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ö–æ–º–∞–Ω–¥—ã:\n" +
                        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—Ö–æ–¥–æ–≤\n" +
                        "/logins ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–æ–≥–æ–≤\n" +
                        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" +
                        "/whois @username ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")


@router.message(lambda m: m.text and m.text.startswith("/last"))
async def get_last_logins(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute(
        "SELECT username, platform, ip, geo, timestamp FROM logins ORDER BY id DESC LIMIT 5")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    text = "\n\n".join(
        [f"üë§ @{r[0]} | {r[1]} | {r[2]}\nüåç {r[3]}\nüïí {r[4]}" for r in rows])
    await message.reply("üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã:\n\n" + text)


@router.message(lambda m: m.text and m.text.startswith("/logins"))
async def get_all_logins(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute(
        "SELECT username, ip, timestamp FROM logins ORDER BY id DESC LIMIT 100")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.reply("‚ö†Ô∏è –õ–æ–≥–æ–≤ –Ω–µ—Ç.")
        return
    text = "\n".join([f"@{r[0]} | {r[1]} | {r[2]}" for r in rows])
    await message.reply("üìã –õ–æ–≥ –≤—Ö–æ–¥–æ–≤:\n\n" + text[:4096])


@router.message(lambda m: m.text and m.text.startswith("/users"))
async def unique_users(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id, username FROM logins")
    users = c.fetchall()
    conn.close()
    if not users:
        await message.reply("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    text = "\n".join([f"<b>{u[1]}</b> ‚Äî {u[0]}" for u in users])
    await message.reply(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n" + text[:4096])


@router.message(F.text.regexp(r"^/whois @?\w+$"))
async def whois_user(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        return
    username = message.text.split()[-1].lstrip("@")
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT user_id, username, full_name, platform, ip, geo, browser, language, timezone, timestamp FROM logins WHERE username = ? ORDER BY id DESC LIMIT 1", (username,))
    row = c.fetchone()
    conn.close()
    if not row:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id, username, full_name, platform, ip, geo, browser, lang, tz, ts = row
    text = f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ @{username}:</b>\n"
    text += f"üë§ –ò–º—è: {full_name}\n"
    text += f"üÜî ID: <code>{user_id}</code>\n"
    text += f"üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
    text += f"üåç –õ–æ–∫–∞—Ü–∏—è: {geo} | {ip}\n"
    text += f"üñ• –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
    text += f"üåê –Ø–∑—ã–∫: {lang}\n"
    text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz}\n"
    text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {ts}"
    await message.reply(text.strip(), parse_mode="HTML")


@router.message(F.text == "/activity")
async def recent_activity(message: types.Message):
    print(f"üì© –ö–æ–º–∞–Ω–¥–∞: /activity –æ—Ç {message.chat.id}")
    if message.chat.id != ADMIN_CHAT_ID:
        return

    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT username, full_name, platform, ip, geo, browser, language, timezone, timestamp FROM logins ORDER BY id DESC LIMIT 5")
    rows = c.fetchall()
    conn.close()

    if not rows:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    text = "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
    for row in rows:
        username, full_name, platform, ip, geo, browser, lang, tz, ts = row
        text += f"üë§ <b>@{username or 'unknown'}</b> ({full_name or '-'})\n"
        text += f"üÜî –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform or '‚Äî'}\n"
        text += f"üåç {geo or '‚Äî'} | {ip or '‚Äî'}\n"
        text += f"üñ• {browser or '‚Äî'}\n"
        text += f"üåê –Ø–∑—ã–∫: {lang or '‚Äî'}\n"
        text += f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz or '‚Äî'}\n"
        text += f"üìÖ {ts}\n\n"

    await message.reply(text.strip(), parse_mode="HTML")


@router.message()
async def fallback_handler(message: types.Message):
    print(
        f"‚ùì –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text} –æ—Ç {message.chat.id}")
    if message.chat.id == ADMIN_CHAT_ID:
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
