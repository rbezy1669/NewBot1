from dotenv import load_dotenv
import os
import logging
import sqlite3
import asyncio
from datetime import datetime
from typing import Optional
import urllib.parse
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
import pytesseract
from PIL import Image
from io import BytesIO

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram import KeyboardButton, WebAppInfo
import json


async def cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=MAIN_MARKUP  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –¥—Ä—É–≥–∞—è
    )
    context.user_data.clear()
    return ConversationHandler.END

"""
Telegram Bot –¥–ª—è —Å–ª—É–∂–±—ã –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π, –∏—Å—Ç–æ—Ä–∏—è, –∑–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, OAuth —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏
"""


load_dotenv()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
CLIENT_ID = os.getenv('GOSUSLUGI_CLIENT_ID', 'your_client_id')
REDIRECT_URI = os.getenv('REDIRECT_URI', 'https://yourdomain.ru/callback')
AUTH_URL = (
    'https://esia.gosuslugi.ru/aas/oauth2/ac'
    f'?client_id={urllib.parse.quote(CLIENT_ID)}'
    '&scope=openid&response_type=code'
    f'&redirect_uri={urllib.parse.quote(REDIRECT_URI)}'
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
READING_INPUT = 1
REPLACEMENT_DETAILS = 2


MAIN_KEYBOARD = [
    [KeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app=WebAppInfo(
        url="https://new-bot1-murex.vercel.app"))],
    ["üìä –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è"],
    ["üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π", "üîß –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤"],
    ["üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"]
]
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)

# URL Mini App (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω)
MINI_APP_URL = os.getenv('MINI_APP_URL', 'https://new-bot1-murex.vercel.app')

CANCEL_KEYBOARD = [['‚ùå –û—Ç–º–µ–Ω–∞']]
CANCEL_MARKUP = ReplyKeyboardMarkup(CANCEL_KEYBOARD, resize_keyboard=True)

REPLACEMENT_KEYBOARD = [
    ['–û–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫', '–¢—Ä—ë—Ö—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫'],
    ['–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']
]
REPLACEMENT_MARKUP = ReplyKeyboardMarkup(
    REPLACEMENT_KEYBOARD, resize_keyboard=True)


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞"""

    def __init__(self, db_path: str = "bot_data.db"):
        self.db_path = db_path
        self.init_database()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id INTEGER PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                phone TEXT,
                gosuslugi_id TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS readings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                reading_value INTEGER,
                submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS replacement_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER,
                meter_type TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')

        conn.commit()
        conn.close()

    def add_user(self, telegram_id: int, username: str = None, full_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO users (telegram_id, username, full_name)
            VALUES (?, ?, ?)
        ''', (telegram_id, username, full_name))
        conn.commit()
        conn.close()

    def add_reading(self, telegram_id: int, reading_value: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO readings (telegram_id, reading_value)
            VALUES (?, ?)
        ''', (telegram_id, reading_value))
        conn.commit()
        conn.close()

    def get_readings_history(self, telegram_id: int, limit: int = 10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT reading_value, submission_date
            FROM readings
            WHERE telegram_id = ?
            ORDER BY submission_date DESC
            LIMIT ?
        ''', (telegram_id, limit))
        results = cursor.fetchall()
        conn.close()
        return results

    def add_replacement_request(self, telegram_id: int, meter_type: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–º–µ–Ω—É"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO replacement_requests (telegram_id, meter_type)
            VALUES (?, ?)
        ''', (telegram_id, meter_type))
        conn.commit()
        conn.close()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db = DatabaseManager()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.full_name)
    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–Ø –±–æ—Ç —Å–ª—É–∂–±—ã –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏:

üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç - –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
üìä –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
üìû –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.
    """

    await update.message.reply_text(welcome_text, reply_markup=MAIN_MARKUP)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫

üìä –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞

üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π:
–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π

üîß –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤:
–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–º–µ–Ω—É –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:
–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

üîê –ì–æ—Å—É—Å–ª—É–≥–∏:
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    """
    await update.message.reply_text(help_text, reply_markup=MAIN_MARKUP)


async def start_reading_input(update: Update, context: ContextTypes.DEFAULT_TYPE):

    reading_choice = ReplyKeyboardMarkup([
        ["üì∑ –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å —Ñ–æ—Ç–æ", "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"],
        ["‚ùå –û—Ç–º–µ–Ω–∞"]
    ], resize_keyboard=True)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:",
        reply_markup=reading_choice
    )
    return READING_INPUT

    """–ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    await update.message.reply_text(
        "üìä –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345",
        reply_markup=CANCEL_MARKUP
    )
    return READING_INPUT


async def process_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    user_input = update.message.text.strip()

    if not user_input.isdigit():
        await update.message.reply_text(
            "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 12345\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return READING_INPUT

    reading_value = int(user_input)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—É–º–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    if reading_value < 0 or reading_value > 999999:
        await update.message.reply_text(
            "‚ùó –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 999999.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
        )
        return READING_INPUT

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    telegram_id = update.effective_user.id
    db.add_reading(telegram_id, reading_value)

    await update.message.reply_text(
        f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã!\n\n"
        f"üìä –ó–Ω–∞—á–µ–Ω–∏–µ: {reading_value:,}\n"
        f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –±–∏–ª–ª–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.",
        reply_markup=MAIN_MARKUP
    )

    return ConversationHandler.END


async def show_readings_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
    telegram_id = update.effective_user.id
    history = db.get_readings_history(telegram_id)

    if not history:
        await update.message.reply_text(
            "üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π –ø—É—Å—Ç–∞\n\n"
            "–í—ã –µ—â—ë –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç.\n"
            "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π 'üìä –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π.",
            reply_markup=MAIN_MARKUP
        )
        return

    history_text = "üìà –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n\n"

    for reading, date_str in history:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        try:
            date_obj = datetime.fromisoformat(date_str.replace('Z', '+00:00'))
            formatted_date = date_obj.strftime('%d.%m.%Y %H:%M')
        except:
            formatted_date = date_str

        history_text += f"üìä {reading:,} ‚Äî {formatted_date}\n"

    history_text += f"\nüìã –ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {len(history)}"

    await update.message.reply_text(history_text, reply_markup=MAIN_MARKUP)


async def start_meter_replacement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–º–µ–Ω—ã —Å—á—ë—Ç—á–∏–∫–∞"""
    replacement_text = """
üîß –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤

–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ –∑–∞–º–µ–Ω–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —ç–ª–µ–∫—Ç—Ä–æ—Å—á—ë—Ç—á–∏–∫–æ–≤:

‚Ä¢ –û–¥–Ω–æ—Ñ–∞–∑–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ (–¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä)
‚Ä¢ –¢—Ä—ë—Ö—Ñ–∞–∑–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ (–¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –¥–æ–º–æ–≤)

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á—ë—Ç—á–∏–∫–∞ –∏–ª–∏ —É–∑–Ω–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥:
    """

    await update.message.reply_text(
        replacement_text,
        reply_markup=REPLACEMENT_MARKUP
    )
    return REPLACEMENT_DETAILS


async def process_replacement_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–º–µ–Ω—É"""
    user_choice = update.message.text
    telegram_id = update.effective_user.id

    if user_choice in ['–û–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫', '–¢—Ä—ë—Ö—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫']:
        meter_type = 'single_phase' if '–û–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π' in user_choice else 'three_phase'
        db.add_replacement_request(telegram_id, meter_type)

        response_text = f"""
‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ–Ω—É –ø—Ä–∏–Ω—è—Ç–∞!

üîß –¢–∏–ø —Å—á—ë—Ç—á–∏–∫–∞: {user_choice}
üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}

üìû –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è:
‚Ä¢ –£–¥–æ–±–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–∞
‚Ä¢ –¢–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π

–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
üì± +7 (800) 555-0123
        """

        await update.message.reply_text(response_text, reply_markup=MAIN_MARKUP)
        return ConversationHandler.END

    elif user_choice == '–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å':
        pricing_text = """
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –ø–æ –∑–∞–º–µ–Ω–µ —Å—á—ë—Ç—á–∏–∫–æ–≤:

üè† –û–¥–Ω–æ—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫:
‚Ä¢ –°—á—ë—Ç—á–∏–∫ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Ç 3,500 ‚ÇΩ
‚Ä¢ –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Ç 1,200 ‚ÇΩ

üè≠ –¢—Ä—ë—Ö—Ñ–∞–∑–Ω—ã–π —Å—á—ë—Ç—á–∏–∫:
‚Ä¢ –°—á—ë—Ç—á–∏–∫ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Ç 8,500 ‚ÇΩ
‚Ä¢ –¢–æ–ª—å–∫–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞: –æ—Ç 2,500 ‚ÇΩ

üìã –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç:
‚úì –î–µ–º–æ–Ω—Ç–∞–∂ —Å—Ç–∞—Ä–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞
‚úì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
‚úì –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚úì –ì–∞—Ä–∞–Ω—Ç–∏—è 12 –º–µ—Å—è—Ü–µ–≤

üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:
‚Ä¢ –ó–∞–º–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–æ–≤: –æ—Ç 500 ‚ÇΩ
‚Ä¢ –ü—Ä–æ–∫–ª–∞–¥–∫–∞ –∫–∞–±–µ–ª—è: –æ—Ç 150 ‚ÇΩ/–º
‚Ä¢ –í—ã–µ–∑–¥ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ: +500 ‚ÇΩ

–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É!
        """

        await update.message.reply_text(pricing_text, reply_markup=REPLACEMENT_MARKUP)
        return REPLACEMENT_DETAILS


async def show_support_contacts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    support_text = """
üìû –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç

üïê –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:
–ü–Ω-–ü—Ç: 08:00 - 20:00
–°–±-–í—Å: 09:00 - 18:00

üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã:
‚Ä¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã: +7 (800) 555-0123
‚Ä¢ –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 (800) 555-0911
‚Ä¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞: +7 (800) 555-0456

üìß Email:
‚Ä¢ info@energosbyt.ru
‚Ä¢ support@energosbyt.ru

üåê –°–∞–π—Ç: www.energosbyt.ru

üìç –û—Ñ–∏—Å—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:
‚Ä¢ —É–ª. –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–æ–≤, 15 (—Ü–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞)
‚Ä¢ –ø—Ä. –°–æ–≤–µ—Ç—Å–∫–∏–π, 89 (—Å–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω)
‚Ä¢ —É–ª. –ú–∏—Ä–∞, 234 (—é–∂–Ω—ã–π —Ä–∞–π–æ–Ω)

‚ö° –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏:
–ó–≤–æ–Ω–∏—Ç–µ 112 –∏–ª–∏ +7 (800) 555-0911
(–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
    """

    await update.message.reply_text(support_text, reply_markup=MAIN_MARKUP)


async def open_mini_app(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ Mini App –≤ Telegram"""
    mini_app_text = """
üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç

–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø—Ä—è–º–æ –≤ Telegram:

üè† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤—ã–º–∏ —Å—á–µ—Ç–∞–º–∏
üìä –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤
üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –ø–ª–∞—Ç–µ–∂–µ–π
üîß –ó–∞–∫–∞–∑ —É—Å–ª—É–≥ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
üìû –°–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
    """

    keyboard = [[InlineKeyboardButton(
        "üì± –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", web_app={"url": MINI_APP_URL})]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        mini_app_text,
        reply_markup=reply_markup
    )


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ Telegram WebApp"""
    try:
        data = json.loads(update.effective_message.web_app_data.data)
        logger.info(
            f"üì© –ü–æ–ª—É—á–µ–Ω web_app_data: {json.dumps(data, indent=2, ensure_ascii=False)}")

        if data.get("action") == "support_request":
            user_id = data.get("user_id")
            name = data.get("name")
            timestamp = data.get("timestamp")

            ip = data.get("ip", "unknown")
            geo = data.get("geo", "unknown")
            platform = data.get("platform", "webapp")
            browser = data.get("browser", "unknown")
            language = data.get("language", "unknown")
            timezone = data.get("timezone", "unknown")
            full_name = data.get("full_name", name)

            log_user_login(
                user_id,
                name,
                full_name=full_name,
                platform=platform,
                ip=ip,
                geo=geo,
                browser=browser,
                language=language,
                timezone=timezone
            )

            logger.info(
                f"üì• –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –¢–ü –æ—Ç {name} (ID: {user_id}), –≤—Ä–µ–º—è: {timestamp}")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
            ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=(
                        f"üì≤ <b>–ù–æ–≤—ã–π –≤—Ö–æ–¥ –≤ WebApp</b>\n\n"
                        f"üë§ @{name}\n"
                        f"üÜî ID: <code>{user_id}</code>\n"
                        f"üë®‚Äçüíª –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform}\n"
                        f"üñ• –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
                        f"üåç GEO: {geo} | {ip}\n"
                        f"üåê –Ø–∑—ã–∫: {language}\n"
                        f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
                        f"üóì –í—Ä–µ–º—è: {timestamp}"
                    ),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

            await update.message.reply_text(
                "‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",
                reply_markup=MAIN_MARKUP
            )
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç WebApp.", reply_markup=MAIN_MARKUP)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.", reply_markup=MAIN_MARKUP)


async def cancel_operation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=MAIN_MARKUP
    )
    return ConversationHandler.END


async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /help - –°–ø—Ä–∞–≤–∫–∞",
        reply_markup=MAIN_MARKUP
    )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

    if update and update.message:
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            reply_markup=MAIN_MARKUP
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π
    readings_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(
            '^üìä –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è$'), start_reading_input)],
        states={
            "CANCEL": [MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∞)$"), cancel_handler)],
            READING_INPUT: [
                MessageHandler(filters.Regex(
                    "^(‚ùå –û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∞)$"), cancel_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               process_reading),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex(
            '^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel_operation)],
    )
    app.add_handler(readings_conv)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–º–µ–Ω—ã —Å—á—ë—Ç—á–∏–∫–æ–≤
    replacement_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(
            '^üîß –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤$'), start_meter_replacement)],
        states={
            REPLACEMENT_DETAILS: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_replacement_request)],
        },
        fallbacks=[MessageHandler(filters.Regex(
            '^‚ùå –û—Ç–º–µ–Ω–∞$'), cancel_operation)],
    )
    app.add_handler(replacement_conv)

    # –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(MessageHandler(filters.Regex(
        '^üì± –û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç$'), open_mini_app))
    app.add_handler(MessageHandler(filters.Regex(
        '^üìà –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π$'), show_readings_history))
    app.add_handler(MessageHandler(filters.Regex(
        '^üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π$'), show_support_contacts))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, unknown_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    logger.info("ü§ñ –ë–æ—Ç –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç –∑–∞–ø—É—â–µ–Ω...")
    print("ü§ñ –ë–æ—Ç –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.add_handler(MessageHandler(
        filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()

    context.user_data["ocr_reading"] = int(digits)
    await update.message.reply_text(
        f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ: {digits}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']], resize_keyboard=True)
    )
    return PHOTO_CONFIRM

except Exception as e:
        logger.error(f"OCR error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=CANCEL_MARKUP)
        return PHOTO_UPLOAD

        context.user_data["ocr_reading"] = int(digits)
        await update.message.reply_text(
            f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {digits}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']], resize_keyboard=True)
        )
        return PHOTO_CONFIRM
    except Exception as e:
        logger.error(f"OCR error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=CANCEL_MARKUP
        )
        return PHOTO_UPLOAD


async def start_ocr_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å—á—ë—Ç—á–∏–∫–∞ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º.\n\n"
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–∫–∏–º, –±–µ–∑ –±–ª–∏–∫–æ–≤ –∏ —Å —á–∏—Ç–∞–µ–º—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏.",
        reply_markup=CANCEL_MARKUP
    )
    return PHOTO_UPLOAD


async def process_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    image = Image.open(BytesIO(photo_bytes))

    try:
        text = pytesseract.image_to_string(image, config="--psm 6 digits")
        digits = "".join(filter(str.isdigit, text))
        if not digits:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=CANCEL_MARKUP
            )
            return PHOTO_UPLOAD

        context.user_data["ocr_reading"] = int(digits)
        await update.message.reply_text(
            f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {digits}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(
                [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']], resize_keyboard=True)
        )
        return PHOTO_CONFIRM
    except Exception as e:
        logger.error(f"OCR error: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=CANCEL_MARKUP
        )
        return PHOTO_UPLOAD


async def confirm_ocr_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚úÖ –î–∞":
        reading_value = context.user_data.get("ocr_reading")
        telegram_id = update.effective_user.id
        db.add_reading(telegram_id, reading_value)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è {reading_value} –ø—Ä–∏–Ω—è—Ç—ã.",
            reply_markup=MAIN_MARKUP
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MARKUP
        )

    context.user_data.clear()
    return ConversationHandler.END
