# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ BACKEND (FastAPI) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§–∞–π–ª: backend.py
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install fastapi uvicorn requests

from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse
import requests
import sqlite3

app = FastAPI()

CLIENT_ID = '–í–ê–®_CLIENT_ID'
CLIENT_SECRET = '–í–ê–®_CLIENT_SECRET'
REDIRECT_URI = 'https://yourdomain.ru/callback'
TOKEN_URL = 'https://esia.gosuslugi.ru/aas/oauth2/te'
USERINFO_URL = 'https://esia.gosuslugi.ru/rs/prns'

@app.get("/callback")
async def callback(request: Request):
    code = request.query_params.get("code")
    tg_id = request.query_params.get("state")

    if not code or not tg_id:
        return {"error": "Missing code or Telegram ID (state)"}

    data = {
        'grant_type': 'authorization_code',
        'code': code,
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'redirect_uri': REDIRECT_URI,
    }
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    token_response = requests.post(TOKEN_URL, data=data, headers=headers)

    if token_response.status_code != 200:
        return {"error": "Token exchange failed", "details": token_response.text}

    tokens = token_response.json()
    access_token = tokens.get("access_token")

    user_response = requests.get(USERINFO_URL, headers={"Authorization": f"Bearer {access_token}"})
    if user_response.status_code != 200:
        return {"error": "User info request failed", "details": user_response.text}

    user_info = user_response.json()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    conn = sqlite3.connect("auth_users.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS users (
            tg_id TEXT PRIMARY KEY,
            full_name TEXT,
            inn TEXT,
            raw TEXT
        )
    """)
    c.execute("REPLACE INTO users (tg_id, full_name, inn, raw) VALUES (?, ?, ?, ?)", (
        tg_id,
        user_info.get("name", ""),
        user_info.get("inn", ""),
        str(user_info)
    ))
    conn.commit()
    conn.close()

    return RedirectResponse(url=f"https://t.me/YOUR_BOT_USERNAME")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TELEGRAM BOT ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§–∞–π–ª: bot.py
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install python-telegram-bot aiosqlite nest_asyncio

import nest_asyncio
nest_asyncio.apply()

import aiosqlite
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
import urllib.parse

BOT_TOKEN = '7807810519:AAGlq6BQhrOiLJe1Obl0H0-nKoHk0KLfsmw'
CLIENT_ID = '–í–ê–®_CLIENT_ID'
REDIRECT_URI = 'https://yourdomain.ru/callback'
AUTH_URL = (
    'https://esia.gosuslugi.ru/aas/oauth2/ac'
    f'?client_id={urllib.parse.quote(CLIENT_ID)}'
    '&scope=openid&response_type=code'
    f'&redirect_uri={urllib.parse.quote(REDIRECT_URI)}'
)

MAIN_KEYBOARD = [
    ['üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏'],
    ['–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è', '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π'],
    ['–ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤', '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π'],
]
MAIN_MARKUP = ReplyKeyboardMarkup(MAIN_KEYBOARD, resize_keyboard=True)
CANCEL_MARKUP = ReplyKeyboardMarkup([['–û—Ç–º–µ–Ω–∞']], resize_keyboard=True)
READING = 1

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    async with aiosqlite.connect("auth_users.db") as db:
        async with db.execute("SELECT full_name FROM users WHERE tg_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                await update.message.reply_text(f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {row[0]}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å.", reply_markup=MAIN_MARKUP)
                return
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å–ª—É–∂–±—ã —É—á—ë—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=MAIN_MARKUP)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n'
        '‚Ä¢ üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n'
        '‚Ä¢ –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è\n'
        '‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö\n'
        '‚Ä¢ –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É\n'
        '‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äî –Ω–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
        reply_markup=MAIN_MARKUP,
    )

async def gosuslugi_login(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    link = AUTH_URL + f"&state={user_id}"
    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", url=link)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=reply_markup)

async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('‚òéÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞: +372 600‚Äë1234\nüìß support@example.com\n‚åö 09:00‚Äë17:00 (–ø–Ω‚Äë–ø—Ç)', reply_markup=MAIN_MARKUP)

async def start_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):', reply_markup=CANCEL_MARKUP)
    return READING

async def save_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    value = update.message.text.strip()
    if not value.isdigit():
        await update.message.reply_text('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.')
        return READING
    await update.message.reply_text(f'‚úÖ –°–ø–∞—Å–∏–±–æ! –ü–æ–∫–∞–∑–∞–Ω–∏—è ({value}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=MAIN_MARKUP)
    return ConversationHandler.END

async def cancel_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=MAIN_MARKUP)
    return ConversationHandler.END

async def meter_replacement(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('üîß –ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤:\n1. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ: +372 600‚Äë5678\n2. –°–æ–≥–ª–∞—Å—É–π—Ç–µ –¥–∞—Ç—É\n3. –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º', reply_markup=MAIN_MARKUP)

async def history_readings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π:\n‚Ä¢ 01.06.2025 ‚Äî 1285\n‚Ä¢ 01.05.2025 ‚Äî 1240\n‚Ä¢ 01.04.2025 ‚Äî 1192', reply_markup=MAIN_MARKUP)

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.', reply_markup=MAIN_MARKUP)

if __name__ == '__main__':
    from telegram.ext import ApplicationBuilder
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler('start', cmd_start))
    app.add_handler(CommandHandler('help', cmd_help))
    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è$'), start_reading)],
        states={READING: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_reading)]},
        fallbacks=[MessageHandler(filters.Regex('^–û—Ç–º–µ–Ω–∞$'), cancel_reading)],
    ))
    app.add_handler(MessageHandler(filters.Regex('^–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π$'), contact_support))
    app.add_handler(MessageHandler(filters.Regex('^–ó–∞–º–µ–Ω–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤$'), meter_replacement))
    app.add_handler(MessageHandler(filters.Regex('^–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π$'), history_readings))
    app.add_handler(MessageHandler(filters.Regex('^üîê –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏$'), gosuslugi_login))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    print('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    app.run_polling()