"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π Telegram Bot –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç
–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
"""

import logging
import os
import json
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any
import requests

try:
    import telegram
    from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
    TELEGRAM_AVAILABLE = True
except ImportError as e:
    print(f"Telegram library import error: {e}")
    TELEGRAM_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
API_BASE_URL = os.getenv('API_BASE_URL', 'http://localhost:5000')

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
READING_INPUT, METER_TYPE_SELECT, READING_CONFIRM = range(3)

class EnergyBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç–∞"""
    
    def __init__(self):
        self.application = None
        

    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("miniapp", self.miniapp_command))
        self.application.add_handler(CommandHandler("readings", self.readings_command))
        self.application.add_handler(CommandHandler("history", self.history_command))
        self.application.add_handler(CommandHandler("services", self.services_command))
        self.application.add_handler(CommandHandler("support", self.support_command))
        
        # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        welcome_text = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "üè¢ –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n"
            "–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏ –ø—Ä—è–º–æ –≤ Telegram:\n"
            "‚ö° –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤\n"
            "üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è\n"
            "üîß –ó–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ —É—Å–ª—É–≥–∏ –∏ —Ä–µ–º–æ–Ω—Ç\n"
            "üí¨ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É 24/7\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [KeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App")],
            [KeyboardButton("‚ö° –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è"), KeyboardButton("üìä –ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("üîß –£—Å–ª—É–≥–∏"), KeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def miniapp_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ /miniapp - –æ—Ç–∫—Ä—ã—Ç–∏–µ Mini App"""
        keyboard = [[
            InlineKeyboardButton(
                "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
                url=f"{API_BASE_URL}/static/index.html"
            )
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üéØ Mini App –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç\n\n"
            "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏:\n\n"
            "üì± –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏\n"
            "‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π\n"
            "üîß –ó–∞–∫–∞–∑ —É—Å–ª—É–≥ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞:",
            reply_markup=reply_markup
        )
    
    async def readings_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        keyboard = [
            [
                InlineKeyboardButton("‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", callback_data="meter_electric"),
                InlineKeyboardButton("üî• –ì–∞–∑", callback_data="meter_gas")
            ],
            [
                InlineKeyboardButton("üíß –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞", callback_data="meter_cold_water"),
                InlineKeyboardButton("üå°Ô∏è –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞", callback_data="meter_hot_water")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üìä –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç—á–∏–∫–∞:",
            reply_markup=reply_markup
        )
    
    async def history_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        user_id = str(update.effective_user.id)
        readings = await self.get_readings_history(user_id)
        
        if not readings:
            await update.message.reply_text(
                "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /readings –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π."
            )
            return
        
        history_text = "üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)\n\n"
        
        for reading in readings[-5:]:
            meter_icon = self.get_meter_icon(reading.get('meter_type', 'electric'))
            try:
                date = datetime.fromisoformat(reading['reading_date']).strftime('%d.%m.%Y')
            except:
                date = "–Ω–µ–¥–∞–≤–Ω–æ"
            
            history_text += f"{meter_icon} {reading['reading_value']} ({date})\n"
        
        keyboard = [[
            InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é", url=f"{API_BASE_URL}/static/index.html")
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(history_text, reply_markup=reply_markup)
    
    async def services_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ —É—Å–ª—É–≥"""
        keyboard = [
            [
                InlineKeyboardButton("üîß –ó–∞–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–∞", callback_data="service_meter_replacement"),
                InlineKeyboardButton("‚öôÔ∏è –†–µ–º–æ–Ω—Ç", callback_data="service_repair")
            ],
            [
                InlineKeyboardButton("üîç –ü–æ–≤–µ—Ä–∫–∞", callback_data="service_inspection"),
                InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="service_consultation")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üîß –ó–∞–∫–∞–∑ —É—Å–ª—É–≥\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —É—Å–ª—É–≥—É:",
            reply_markup=reply_markup
        )
    
    async def support_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", url="tel:+78001234567"),
                InlineKeyboardButton("‚úâÔ∏è Email", url="mailto:support@energosbyt.ru")
            ],
            [
                InlineKeyboardButton("üí¨ –û–Ω–ª–∞–π–Ω —á–∞—Ç", callback_data="start_chat")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üí¨ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 20:00 (–ø–Ω-–ø—Ç)\n"
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 800 123-45-67\n"
            "‚úâÔ∏è Email: support@energosbyt.ru\n\n"
            "‚ö†Ô∏è –ê–≤–∞—Ä–∏–π–Ω–∞—è —Å–ª—É–∂–±–∞: +7 800 123-45-68 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)",
            reply_markup=reply_markup
        )
    
    async def help_command(self, update, context):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/miniapp - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "/readings - –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π\n"
            "/services - –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏\n"
            "/support - –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        )
        
        await update.message.reply_text(help_text)
    
    async def button_callback(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("meter_"):
            await self.handle_meter_selection(query, context)
        elif query.data.startswith("service_"):
            await self.handle_service_selection(query, context)
        elif query.data == "start_chat":
            await query.edit_message_text(
                "üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º:\n"
                "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç–µ: +7 800 123-45-67\n"
                "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ: support@energosbyt.ru"
            )
    
    async def handle_meter_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        meter_types = {
            "meter_electric": "‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ",
            "meter_gas": "üî• –ì–∞–∑", 
            "meter_cold_water": "üíß –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞",
            "meter_hot_water": "üå°Ô∏è –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞"
        }
        
        meter_name = meter_types.get(query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—á–µ—Ç—á–∏–∫")
        context.user_data['meter_type'] = query.data.replace("meter_", "")
        context.user_data['meter_name'] = meter_name
        
        await query.edit_message_text(
            f"üìä {meter_name}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —á–∏—Å–ª–æ–º:"
        )
        
        context.user_data['waiting_for_reading'] = True
    
    async def handle_service_selection(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏"""
        service_types = {
            "service_meter_replacement": "–ó–∞–º–µ–Ω–∞ —Å—á–µ—Ç—á–∏–∫–∞",
            "service_repair": "–†–µ–º–æ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞",
            "service_inspection": "–ü–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞", 
            "service_consultation": "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        }
        
        service_name = service_types.get(query.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —É—Å–ª—É–≥–∞")
        
        await query.edit_message_text(
            f"üîß {service_name}\n\n"
            "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.\n\n"
            "üìû –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 20:00"
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ API
        user_id = str(query.from_user.id)
        service_type = query.data.replace("service_", "")
        await self.create_service_request(user_id, service_type, f"–ó–∞—è–≤–∫–∞ –Ω–∞ {service_name.lower()}")
    
    async def handle_text(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if text == "üöÄ –û—Ç–∫—Ä—ã—Ç—å Mini App":
            await self.miniapp_command(update, context)
        elif text == "‚ö° –ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è":
            await self.readings_command(update, context)
        elif text == "üìä –ò—Å—Ç–æ—Ä–∏—è":
            await self.history_command(update, context)
        elif text == "üîß –£—Å–ª—É–≥–∏":
            await self.services_command(update, context)
        elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            await self.support_command(update, context)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        elif context.user_data.get('waiting_for_reading'):
            await self.process_reading_input(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n"
                "–ù–∞–∂–º–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def process_reading_input(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        try:
            reading_value = float(update.message.text.replace(',', '.'))
            
            if reading_value < 0:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∫–∞–∑–∞–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            user_id = str(update.effective_user.id)
            meter_type = context.user_data.get('meter_type', 'electric')
            meter_name = context.user_data.get('meter_name', '–°—á–µ—Ç—á–∏–∫')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API
            success = await self.submit_reading(user_id, reading_value, meter_type)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
                    f"–¢–∏–ø: {meter_name}\n"
                    f"–ó–Ω–∞—á–µ–Ω–∏–µ: {reading_value}\n"
                    f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                    "üì± –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
                )
            else:
                await update.message.reply_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            context.user_data.pop('waiting_for_reading', None)
            context.user_data.pop('meter_type', None)
            context.user_data.pop('meter_name', None)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 –∏–ª–∏ 1234.5):"
            )
    
    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
    
    # API –º–µ—Ç–æ–¥—ã
    async def submit_reading(self, user_id: str, reading_value: float, meter_type: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —á–µ—Ä–µ–∑ API"""
        try:
            data = {
                "telegram_id": int(user_id),
                "reading_value": int(reading_value),
                "meter_type": meter_type
            }
            response = requests.post(f"{API_BASE_URL}/api/readings", json=data)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Error submitting reading: {e}")
            return False
    
    async def get_readings_history(self, user_id: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π"""
        try:
            response = requests.get(f"{API_BASE_URL}/api/readings/{user_id}")
            if response.status_code == 200:
                return response.json().get('readings', [])
        except Exception as e:
            logger.error(f"Error getting readings history: {e}")
        return []
    
    async def create_service_request(self, user_id: str, service_type: str, description: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —É—Å–ª—É–≥—É"""
        try:
            data = {
                "telegram_id": int(user_id),
                "service_type": service_type,
                "description": description
            }
            response = requests.post(f"{API_BASE_URL}/api/service-request", json=data)
            return response.status_code == 200
        except Exception as e:
            logger.error(f"Error creating service request: {e}")
            return False
    
    @staticmethod
    def get_meter_icon(meter_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        icons = {
            'electric': '‚ö°',
            'gas': 'üî•',
            'cold_water': 'üíß',
            'hot_water': 'üå°Ô∏è',
            'water': 'üíß'
        }
        return icons.get(meter_type, 'üìä')
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_AVAILABLE:
            logger.error("Telegram library –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            if not BOT_TOKEN:
                raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
            self.application = Application.builder().token(BOT_TOKEN).build()
            self.register_handlers()
            
            logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            self.application.run_polling(drop_pending_updates=True)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        bot = EnergyBot()
        bot.run()
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()