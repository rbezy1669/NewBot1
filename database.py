"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import sqlite3
import os
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class DatabaseInitializer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.databases = {
            'bot_data.db': self.init_bot_database,
            'backend_data.db': self.init_backend_database,
            'auth_users.db': self.init_auth_database,
            'readings.db': self.init_readings_database
        }
    
    def initialize_all(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        for db_name, init_func in self.databases.items():
            try:
                init_func(db_name)
                print(f"‚úÖ {db_name} - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {db_name}: {e}")
                logger.error(f"Database init error for {db_name}: {e}")
        
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def init_bot_database(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram –±–æ—Ç–∞"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                telegram_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                full_name TEXT,
                phone TEXT,
                gosuslugi_id TEXT,
                is_verified BOOLEAN DEFAULT FALSE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS readings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                reading_value INTEGER NOT NULL,
                meter_number TEXT,
                submission_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'submitted',
                notes TEXT,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∑–∞–º–µ–Ω—É —Å—á—ë—Ç—á–∏–∫–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS replacement_requests (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                meter_type TEXT NOT NULL,
                current_meter_number TEXT,
                address TEXT,
                preferred_date TEXT,
                phone_contact TEXT,
                status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                notes TEXT,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS support_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                message_text TEXT NOT NULL,
                category TEXT DEFAULT 'general',
                status TEXT DEFAULT 'open',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                response_text TEXT,
                responded_at TIMESTAMP,
                FOREIGN KEY (telegram_id) REFERENCES users (telegram_id)
            )
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_readings_telegram_id ON readings(telegram_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_readings_date ON readings(submission_date)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_telegram_id ON replacement_requests(telegram_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_status ON replacement_requests(status)')
        
        conn.commit()
        conn.close()
    
    def init_backend_database(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backend API"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS auth_users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id TEXT UNIQUE,
                gosuslugi_id TEXT UNIQUE,
                full_name TEXT,
                first_name TEXT,
                last_name TEXT,
                middle_name TEXT,
                email TEXT,
                inn TEXT,
                snils TEXT,
                phone TEXT,
                birth_date TEXT,
                address TEXT,
                raw_data TEXT,
                access_token TEXT,
                refresh_token TEXT,
                token_expires_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ email –ø–æ–¥–ø–∏—Å–æ–∫
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS email_subscriptions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                telegram_id TEXT,
                full_name TEXT,
                subscription_source TEXT DEFAULT 'web',
                subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                unsubscribed_at TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE,
                preferences TEXT -- JSON —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É)
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promotions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                type TEXT NOT NULL,
                is_active BOOLEAN DEFAULT TRUE,
                start_date TIMESTAMP,
                end_date TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ API –∑–∞–ø—Ä–æ—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS api_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                endpoint TEXT,
                method TEXT,
                ip_address TEXT,
                user_agent TEXT,
                telegram_id TEXT,
                request_data TEXT,
                response_status INTEGER,
                response_time_ms INTEGER,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cursor.execute('''
            INSERT OR IGNORE INTO promotions (id, title, description, type)
            VALUES 
            (1, '–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –æ–ø–ª–∞—Ç—É —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ –æ–Ω–ª–∞–π–Ω', '–û–ø–ª–∞—á–∏–≤–∞–π—Ç–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —Å–∫–∏–¥–∫—É 15%. –ë—ã—Å—Ç—Ä–æ –∏ —É–¥–æ–±–Ω–æ! –ê–∫—Ü–∏—è –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞.', 'discount'),
            (2, '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏—é', '–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—é –≤ –≤–∞—à–µ–º –¥–æ–º–µ. –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.', 'consult'),
            (3, '–ê–∫—Ü–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', '–ü–æ–¥–∫–ª—é—á–∞–π—Ç–µ—Å—å –∫ –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É 10% –Ω–∞ –ø–µ—Ä–≤—ã–π —Å—á–µ—Ç. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞.', 'promo'),
            (4, '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ¬´–≠–Ω–µ—Ä–≥–æ–±–æ–Ω—É—Å¬ª', '–ù–∞–∫–æ–ø–∏—Ç–µ –±–∞–ª–ª—ã –∑–∞ –æ–ø–ª–∞—Ç—É –∏ –æ–±–º–µ–Ω—è–π—Ç–µ –∏—Ö –Ω–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ —É—Å–ª—É–≥–∏. 1 —Ä—É–±–ª—å = 1 –±–∞–ª–ª. –ú–∏–Ω–∏–º—É–º –¥–ª—è –æ–±–º–µ–Ω–∞ ‚Äî 100 –±–∞–ª–ª–æ–≤.', 'loyalty')
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_auth_telegram_id ON auth_users(telegram_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_auth_gosuslugi_id ON auth_users(gosuslugi_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_subscriptions_email ON email_subscriptions(email)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_promotions_active ON promotions(is_active)')
        
        conn.commit()
        conn.close()
    
    def init_auth_database(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                tg_id TEXT PRIMARY KEY,
                full_name TEXT,
                inn TEXT,
                raw TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def init_readings_database(self, db_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á—ë—Ç—á–∏–∫–æ–≤"""
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS meter_readings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                meter_number TEXT,
                reading_value INTEGER NOT NULL,
                reading_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                submission_method TEXT DEFAULT 'telegram',
                status TEXT DEFAULT 'confirmed',
                previous_reading INTEGER,
                consumption_kwh INTEGER,
                billing_period TEXT,
                notes TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS user_meters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT NOT NULL,
                meter_number TEXT UNIQUE NOT NULL,
                meter_type TEXT DEFAULT 'single_phase',
                installation_date TIMESTAMP,
                last_reading INTEGER DEFAULT 0,
                last_reading_date TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE,
                address TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ò–Ω–¥–µ–∫—Å—ã
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_readings_user_id ON meter_readings(user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_readings_date ON meter_readings(reading_date)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_meters_user_id ON user_meters(user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_meters_number ON user_meters(meter_number)')
        
        conn.commit()
        conn.close()
    
    def create_sample_data(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            conn = sqlite3.connect('bot_data.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR IGNORE INTO users 
                (telegram_id, username, first_name, full_name, created_at)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                123456789,  # –¢–µ—Å—Ç–æ–≤—ã–π Telegram ID
                'test_user',
                '–¢–µ—Å—Ç',
                '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                datetime.now().isoformat()
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
            cursor.execute('''
                INSERT OR IGNORE INTO readings 
                (telegram_id, reading_value, submission_date)
                VALUES (?, ?, ?)
            ''', (
                123456789,
                12345,
                datetime.now().isoformat()
            ))
            
            conn.commit()
            conn.close()
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def check_database_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        for db_name in self.databases.keys():
            if os.path.exists(db_name):
                try:
                    conn = sqlite3.connect(db_name)
                    cursor = conn.cursor()
                    cursor.execute("PRAGMA integrity_check")
                    result = cursor.fetchone()[0]
                    conn.close()
                    
                    if result == "ok":
                        print(f"‚úÖ {db_name} - —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å OK")
                    else:
                        print(f"‚ö†Ô∏è {db_name} - –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: {result}")
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {db_name}: {e}")
            else:
                print(f"‚ö†Ô∏è {db_name} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def backup_databases(self, backup_dir: str = "backups"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        import shutil
        
        if not os.path.exists(backup_dir):
            os.makedirs(backup_dir)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        for db_name in self.databases.keys():
            if os.path.exists(db_name):
                try:
                    backup_name = f"{backup_dir}/{db_name}_{timestamp}.backup"
                    shutil.copy2(db_name, backup_name)
                    print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏ {db_name}: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    initializer = DatabaseInitializer()
    
    print("üóÑÔ∏è –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ë–î
    initializer.initialize_all()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    initializer.create_sample_data()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    initializer.check_database_integrity()
    
    print("=" * 50)
    print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
