import os
import sqlite3
import asyncio
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
BOT_TOKEN = os.getenv("ADMIN_BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text.in_(["/start", "/admin"]))
async def start_admin(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await message.reply("ü§ñ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ö–æ–º–∞–Ω–¥—ã:\n" +
                        "/last ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≤—Ö–æ–¥–æ–≤\n" +
                        "/logins ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –ª–æ–≥–æ–≤\n" +
                        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.message(F.text == "/last")
async def get_last_logins(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT username, platform, ip, geo, timestamp FROM logins ORDER BY id DESC LIMIT 5")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return
    text = "\n\n".join([f"üë§ @{r[0]} | {r[1]} | {r[2]}\nüåç {r[3]}\nüïí {r[4]}" for r in rows])
    await message.reply("üïµÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤—Ö–æ–¥—ã:\n\n" + text)

@router.message(F.text == "/logins")
async def get_all_logins(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT username, ip, timestamp FROM logins ORDER BY id DESC LIMIT 100")
    rows = c.fetchall()
    conn.close()
    if not rows:
        await message.reply("‚ö†Ô∏è –õ–æ–≥–æ–≤ –Ω–µ—Ç.")
        return
    text = "\n".join([f"@{r[0]} | {r[1]} | {r[2]}" for r in rows])
    await message.reply("üìã –õ–æ–≥ –≤—Ö–æ–¥–æ–≤:\n\n" + text[:4096])

@router.message(F.text == "/users")
async def unique_users(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        return
    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT DISTINCT user_id, username FROM logins")
    users = c.fetchall()
    conn.close()
    if not users:
        await message.reply("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    text = "\n".join([f"<b>{u[1]}</b> ‚Äî {u[0]}" for u in users])
    await message.reply(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n" + text[:4096])


@router.message(F.text == "/activity")
async def recent_activity(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        return

    conn = sqlite3.connect("analytics.db")
    c = conn.cursor()
    c.execute("SELECT username, platform, ip, geo, timestamp FROM logins ORDER BY id DESC LIMIT 5")
    rows = c.fetchall()
    conn.close()

    if not rows:
        await message.reply("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    text = "üßæ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n\n"
    for row in rows:
        username, platform, ip, geo, ts = row
        username_str = f"@{username}" if username else "<i>–ë–µ–∑ –∏–º–µ–Ω–∏</i>"
        platform_str = f"{platform}" if platform and platform != "unknown" else ""
        geo_str = f"{geo}" if geo and geo != "unknown" else ""
        ip_str = f"{ip}" if ip and ip != "unknown" else ""
        time_str = ts if ts else ""

        text += f"üë§ {username_str}"
        if platform_str:
            text += f" | {platform_str}"
        if geo_str or ip_str:
            text += f"\nüåç"
            if geo_str:
                text += f" {geo_str}"
            if ip_str:
                text += f" | {ip_str}"
        if time_str:
            text += f"\nüïí {time_str}"
        text += "\n\n"

    await message.reply(text.strip(), parse_mode="HTML")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
