"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç
–£–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–æ–º, Telegram –±–æ—Ç–æ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
"""

import os
import sys
import time
import signal
import subprocess
import threading
import logging
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ServiceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self):
        self.services: List[subprocess.Popen] = []
        self.running = False
        self.setup_signal_handlers()
    
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.stop_all_services()
        sys.exit(0)
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –º–æ–¥—É–ª–µ–π
        required_modules = [
            'fastapi',
            'uvicorn',
            'telegram',
            'requests',
            'sqlite3'
        ]
        
        missing_modules = []
        for module in required_modules:
            try:
                __import__(module)
                print(f"‚úÖ {module}")
            except ImportError:
                missing_modules.append(module)
                print(f"‚ùå {module} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        if missing_modules:
            print(f"\n‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –º–æ–¥—É–ª–µ–π: {', '.join(missing_modules)}")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
            print("pip install fastapi uvicorn python-telegram-bot requests")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –¥–µ–º–æ —Ä–µ–∂–∏–º–∞)
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token:
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ")
        else:
            print("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
        
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        return True
    
    def init_databases(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        try:
            from database import DatabaseInitializer
            initializer = DatabaseInitializer()
            initializer.initialize_all()
            print("‚úÖ –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def start_web_server(self):
        """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ FastAPI"""
        print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, 'backend.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.services.append(process)
            print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (–ø–æ—Ä—Ç 8000)")
            return process
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return None
    
    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ BOT_TOKEN
        if not os.getenv('BOT_TOKEN'):
            print("‚ö†Ô∏è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
            return None
            
        try:
            process = subprocess.Popen([
                sys.executable, 'bot.py'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.services.append(process)
            print("‚úÖ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return process
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return None
    
    def monitor_service(self, process: subprocess.Popen, name: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        while self.running and process.poll() is None:
            time.sleep(5)
        
        if self.running:
            logger.warning(f"–°–µ—Ä–≤–∏—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
            print(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            if name == "web-server":
                self.start_web_server()
            elif name == "telegram-bot":
                self.start_telegram_bot()
    
    def start_all_services(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç...")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self.check_dependencies():
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        self.init_databases()
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        web_process = self.start_web_server()
        if web_process:
            threading.Thread(
                target=self.monitor_service,
                args=(web_process, "web-server"),
                daemon=True
            ).start()
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
        bot_process = self.start_telegram_bot()
        if bot_process:
            threading.Thread(
                target=self.monitor_service,
                args=(bot_process, "telegram-bot"),
                daemon=True
            ).start()
        
        print("=" * 50)
        print("üéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print()
        print("üì± Telegram –±–æ—Ç: –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("üåê –í–µ–±-–ø–æ—Ä—Ç–∞–ª: http://localhost:5000")
        print("üîó API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:5000/docs")
        print()
        print("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 50)
        
        return True
    
    def stop_all_services(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        for i, process in enumerate(self.services):
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å {i+1} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                process.kill()
                print(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {i+1} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {i+1}: {e}")
        
        self.services.clear()
        print("üèÅ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("-" * 30)
        
        for i, process in enumerate(self.services):
            if process.poll() is None:
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å {i+1}: —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {process.pid})")
            else:
                print(f"‚ùå –°–µ—Ä–≤–∏—Å {i+1}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def run_interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        while self.running:
            try:
                print("\n" + "=" * 50)
                print("üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≠–Ω–µ—Ä–≥–æ—Å–±—ã—Ç")
                print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤")
                print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä")
                print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞")
                print("4. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
                print("5. –í—ã—Ö–æ–¥")
                print("=" * 50)
                
                choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã: ").strip()
                
                if choice == '1':
                    self.show_status()
                elif choice == '2':
                    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
                    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                elif choice == '3':
                    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
                    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                elif choice == '4':
                    self.stop_all_services()
                    break
                elif choice == '5':
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {e}")
    
    def wait_for_services(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            while self.running and any(p.poll() is None for p in self.services):
                time.sleep(1)
        except KeyboardInterrupt:
            pass

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              üè¢ –°–ò–°–¢–ï–ú–ê –≠–ù–ï–†–ì–û–°–ë–´–¢                   ‚ïë
‚ïë                                                      ‚ïë
‚ïë  üì± Telegram Bot + üåê Web Portal + üîê Gosuslugi     ‚ïë
‚ïë                                                      ‚ïë
‚ïë  –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤           ‚ïë
‚ïë  —ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    manager = ServiceManager()
    
    try:
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        if manager.start_all_services():
            # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
            manager.wait_for_services()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        manager.stop_all_services()

if __name__ == "__main__":
    main()
